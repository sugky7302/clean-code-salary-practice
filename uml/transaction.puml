@startuml transaction
class TransactionParser
interface Transaction {
    + execute()
}
TransactionParser -> Transaction: <<create>>
@enduml

@startuml AddEmployeeTransaction
title Add Employee
interface Transaction
class AddEmployeeTransaction {
    - empid
    - itsAddress
    - itsName
}
class Employee {
    + setSchedule()
    +setClassification()
    +setMethod()
}
class PayrollDatabase
class HoldMethod
class AddHourlyEmployee {
    - hourlyRate
}
class AddSalariedEmployee {
    - salary
}
class AddCommissionedEmployee {
    - salary
    - commissionRate
}
class WeeklySchedule
class BiweeklySchedule
class MonthlySchedule
class HourlyClassification
class SalariedClassification
class CommissionedClassification

Transaction <|-- AddEmployeeTransaction
AddEmployeeTransaction -> Employee: <<creates>>
AddEmployeeTransaction -> PayrollDatabase: <<global>>
AddEmployeeTransaction -> HoldMethod: <<creates>>
AddEmployeeTransaction <|-- AddHourlyEmployee
AddEmployeeTransaction <|-- AddSalariedEmployee
AddEmployeeTransaction <|-- AddCommissionedEmployee
AddHourlyEmployee --> HourlyClassification: <<creates>>
AddHourlyEmployee --> WeeklySchedule: <<creates>>
AddSalariedEmployee --> SalariedClassification: <<creates>>
AddSalariedEmployee --> MonthlySchedule: <<creates>>
AddCommissionedEmployee --> CommissionedClassification: <<creates>>
AddCommissionedEmployee --> BiweeklySchedule: <<creates>>
@enduml

@startuml AddEmployeeProgress
title Add Employee Progress
actor user
user -> AddEmployeeTransaction: Execute
activate AddEmployeeTransaction
AddEmployeeTransaction -> Employee: name, address
AddEmployeeTransaction -> AddEmployeeTransaction: GetClassiflication
activate AddEmployeeTransaction
deactivate AddEmployeeTransaction
AddEmployeeTransaction -> Employee: SetClassification
activate Employee
deactivate Employee
AddEmployeeTransaction -> AddEmployeeTransaction: GetSchedule
activate AddEmployeeTransaction
deactivate AddEmployeeTransaction
AddEmployeeTransaction -> Employee: SetSchedule
activate Employee
deactivate Employee
AddEmployeeTransaction -> HoldMethod
AddEmployeeTransaction -> Employee: SetMethod
AddEmployeeTransaction -> PayrollDatabase: AddEmployee(employee)
deactivate AddEmployeeTransaction
activate PayrollDatabase
deactivate PayrollDatabase
@enduml

@startuml DeleteEmployeeTransaction
title Delete Employee
interface Transaction
class DeleteEmployeeTransaction {
    - empid
}
class PayrollDatabase
Transaction <|-- DeleteEmployeeTransaction
DeleteEmployeeTransaction -> PayrollDatabase

@enduml

@startuml DeleteEmployeeProgress
actor user
participant DeleteEmployeeTransaction
participant PayrollDatabase
user -> DeleteEmployeeTransaction: Execute
activate DeleteEmployeeTransaction
DeleteEmployeeTransaction -> PayrollDatabase: DeleteEmployee(empid)
activate PayrollDatabase
deactivate PayrollDatabase
deactivate DeleteEmployeeTransaction
@enduml

@startuml TimeCardTransaction
interface Transaction
class TimeCardTransaction {
    - date
    - hours
    - empId
}
class PayrollDatabase
class TimeCard {
    - date
    - hours
}
class Employee
class HourlyClassification
Transaction <|-- TimeCardTransaction
TimeCardTransaction -> PayrollDatabase
TimeCardTransaction --> TimeCard
TimeCardTransaction --> Employee
TimeCardTransaction --> HourlyClassification
Employee --> PaymentClassification
HourlyClassification --|> PaymentClassification
@enduml

@startuml TimeCardProgress
actor user
participant TimeCardTransaction
participant PayrollDatabase
participant Employee
participant TimeCard
participant HourlyClassification
user -> TimeCardTransaction: Execute
activate TimeCardTransaction
TimeCardTransaction -> PayrollDatabase: GetEmployee(empId): Employee
activate PayrollDatabase
deactivate PayrollDatabase
TimeCardTransaction -> Employee: GetPaymentClassification(): PaymentClassification
activate Employee
Employee -> HourlyClassification: <<create>>
deactivate Employee
TimeCardTransaction -> TimeCard: date, hours
TimeCardTransaction -> HourlyClassification: AddTimeCard(timeCard)
@enduml

@startuml SalesReceiptTransaction
interface Transaction
class SalesReceiptTransaction {
    - date
    - amount
    - empId
}
class PayrollDatabase
class Employee
class SalesReceipt {
    - date
    - amount
}
interface PaymentClassification
class CommissionedClassification

Transaction <|-- SalesReceiptTransaction
SalesReceiptTransaction -left-> PayrollDatabase
SalesReceiptTransaction --> SalesReceipt
SalesReceiptTransaction --> Employee
SalesReceiptTransaction --> CommissionedClassification
SalesReceiptTransaction -right-> PaymentClassification
PaymentClassification <|-- CommissionedClassification
@enduml

@startuml SalesReceiptProgress
actor user
participant SalesReceiptTransaction
participant PayrollDatabase
participant Employee
participant CommissionedClassification
participant SalesReceipt

user -> SalesReceiptTransaction: Execute
activate SalesReceiptTransaction
SalesReceiptTransaction -> PayrollDatabase: GetEmployee(empId): Employee
activate PayrollDatabase
deactivate PayrollDatabase
SalesReceiptTransaction -> Employee: GetPaymentClassification(): PaymentClassification
activate Employee
Employee -> CommissionedClassification: <<create>>
deactivate Employee
SalesReceiptTransaction -> SalesReceipt: date, amount
SalesReceiptTransaction -> CommissionedClassification: AddSalesReceipt(salesReceipt)
@enduml

@startuml ServiceChargeTransaction
interface Transaction
class ServiceChargeTransaction {
    - date
    - amount
    - memberId
}
class PayrollDatabase
class Employee
class ServiceCharge {
    - date
    - amount
}
interface Affiliation
class UnionAffiliation

Transaction <|-- ServiceChargeTransaction
ServiceChargeTransaction -left-> PayrollDatabase
ServiceChargeTransaction --> ServiceCharge
ServiceChargeTransaction --> Employee
ServiceChargeTransaction --> UnionAffiliation
ServiceChargeTransaction -right-> Affiliation
Affiliation <|-- UnionAffiliation
@enduml

@startuml ServiceChargeProgress
actor user
participant ServiceChargeTransaction
participant PayrollDatabase
participant Employee
participant UnionAffiliation
participant ServiceCharge

user -> ServiceChargeTransaction: Execute
activate ServiceChargeTransaction
ServiceChargeTransaction -> PayrollDatabase: GetUnionMember(memberId): Employee
activate PayrollDatabase
deactivate PayrollDatabase
ServiceChargeTransaction -> Employee: GetAffiliation(): Affiliation
ServiceChargeTransaction -> ServiceChargeTransaction: Search through affiliation to find an affiliation that can be downcast to a UnionAffiliation.
ServiceChargeTransaction -> Employee
activate Employee
Employee -> UnionAffiliation: <<create>>
deactivate Employee
ServiceChargeTransaction -> ServiceCharge: date, amount
ServiceChargeTransaction -> UnionAffiliation: AddServiceCharge(serviceCharge)
@enduml